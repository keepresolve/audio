<template>
  <el-container class="index">
    <!-- <div class="status" :style="{background:socketStatus?'blue':'red'}"></div>
    <el-progress type="circle" :percentage="percentage" status="exception"></el-progress>
    <button @click="setTime">asads</button>-->
    <el-header class="header">
      <el-table :data="numberList" style="width: 100%;height:200px;" max-height="250">
        <el-table-column fixed prop="number" label="手机号"></el-table-column>
        <el-table-column prop="startPrice" label="标准"></el-table-column>
        <el-table-column prop="maxPrice" label="承诺费"></el-table-column>
        <el-table-column prop="unit" label="单位"></el-table-column>
        <el-table-column fixed="right" label="操作">
          <template slot-scope="scope">
            <el-button
              @click.native.prevent="deleteRow(scope.$index, numberList)"
              type="text"
              size="small"
            >移除</el-button>
          </template>
        </el-table-column>
      </el-table>
    </el-header>
    <el-main class="main">
      <ul>
        <li
          v-for="(item,index) in chatList"
          :key="index"
          :class="{left:!item.self,right:item.self}"
        >
          <span>
            <span>{{item.userName}}:</span>
            <span>{{item.msg}}</span>
          </span>
        </li>
      </ul>
    </el-main>
    <el-footer class="footer">
      <el-input placeholder="请输入内容" ref="sendMessage" v-model="message" class="input-with-select">
        <el-button slot="append" @click="send">发送</el-button>
      </el-input>
    </el-footer>
  </el-container>
</template>
<script>
export default {
    name: 'HelloWorld',
    data() {
        return {
            percentage: 0,
            id: null,
            socketStatus: 0,
            message: '',
            chatList: [],
            numberList: []
        }
    },
    sockets: {
        chatMessage(data) {},
        message(data) {
            data = JSON.parse(data)
            let self = data.token == localStorage.token
            switch (data.type) {
                case 'chat':
                    this.chatList.push({
                        msg: data.msg,
                        self,
                        userName: self ? '我' : data.userName
                    })
                    break
                case 'getMessage':
                    this.chatList = data.list
                    break
                default:
                    break
            }
            console.log('message', data)
        },
        percentage(data) {
            this.percentage = JSON.parse(data).percentage
        },
        broadcast(data) {
            console.log('broadcast', data)
        }
    },
    mounted() {
        console.log(this.$refs.sendMessage)
        let that = this
        document
            .querySelector('.el-input__inner')
            .addEventListener('keydown', function(e) {
                if (e.keyCode == 13) {
                    that.send()
                }
            })
        this.$socket.send(
            JSON.stringify({
                type: 'getMessage',
                limit: 20,
                currentPage: 1,
                userName: localStorage.userName,
                passWord: localStorage.passWord,
                unit: localStorage.unit,
                token: localStorage.token
            })
        )
    },
    methods: {
        send() {
            if (this.message == '') return
            if (!localStorage.token) {
                this.$message({
                    type: 'warning',
                    message: '请重新登陆'
                })
                return this.$router.push('/login')
            }

            let data = {
                type: 'chat',
                userName: localStorage.userName,
                passWord: localStorage.passWord,
                unit: localStorage.unit,
                msg: this.message,
                token: localStorage.token
            }
            this.$socket.send(JSON.stringify(data))
            this.message = ''
        },
        setTime() {
            this.$socket.emit(
                'percentage',
                JSON.stringify({
                    total: 100
                })
            )
        }
    }
}
</script>

<style scoped>
.status {
    width: 20px;
    height: 20px;
    border-radius: 50%;
}
.left > span,
.right > span {
    padding: 3px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.12), 0 0 6px rgba(0, 0, 0, 0.04);
}
.left > span {
    background: #fff;
}
.right > span {
    background: #1989fa;
}
.left {
    height: 40px;
    line-height: 40px;
    text-align: left;

    color: #333;
}
.right {
    height: 40px;
    line-height: 40px;
    text-align: right;
    color: #333;
}
.header {
    height: 200px;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.12), 0 0 6px rgba(0, 0, 0, 0.04);
}
.main {
    left: 20px;
    right: 20px;
    position: absolute;
    top: 200px;
    bottom: 100px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.12), 0 0 6px rgba(0, 0, 0, 0.04);
}
.footer {
    height: 100px;
    position: absolute;
    bottom: 0px;
    left: 20px;
    right: 20px;
}
</style>
